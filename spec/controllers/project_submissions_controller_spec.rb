require 'rails_helper'
require 'lti_score'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ProjectSubmissionsController, type: :controller do
  render_views
  let(:user) { create :fellow_user }

  let(:course_content) { create(:course_content) }
  let(:custom_content_version) { create(:custom_content_version, attributes) }
  let(:attributes) { valid_attributes }
  let(:valid_attributes) { attributes_for(:custom_content_version).merge(course_content_id: course_content.id) }
  let(:valid_session) { {} }
  let(:state) { LtiLaunchController.generate_state }

  before do
    sign_in user
  end

  describe 'POST #create' do
    let(:lti_launch) { create(:lti_launch_assignment) }
    let(:project) { create(:course_content_assignment_with_versions) }

    it 'creates a submission' do
      allow_any_instance_of(LtiAdvantageAPI)
        .to receive(:get_access_token)
        .and_return('oasjfoasjofdj')

      stub_request(:post, "#{lti_launch.request_message.line_item_url}/scores").to_return(body: '{"fake" : "response"}')

      url = "#{course_content_custom_content_version_url(
        project,
        project.last_version,
      )}?user_override_id=#{user.id}"

      post(
        :create,
        params: {
          project_id: project.id,
          state: lti_launch.state,
          version: project.last_version.id,
        },
        session: valid_session,
      )

      expect(WebMock)
        .to have_requested(
          :post,
          "#{lti_launch.request_message.line_item_url}/scores",
        ).with { |req|
          body = JSON.parse(req.body)
          body['userId'].to_i == user.canvas_id.to_i \
          && body[LtiScore::LTI_SCORE_SUBMISSION_URL_KEY]['submission_data'] == url
        }
        .once
    end
  end
end
