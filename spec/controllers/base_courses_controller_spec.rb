require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe BaseCoursesController, type: :controller do
  render_views

  let(:user) { create :admin_user }
  let(:course) { create(:course_with_canvas_id, course_attributes) }
  let(:course_template) { create(:course_template_with_canvas_id, course_template_attributes) }
  let(:course_attributes) { valid_course_attributes }
  let(:course_template_attributes) { valid_course_template_attributes }
  # This should return the minimal set of attributes required to create a valid
  # BaseCourse. As you add validations to BaseCourse, be sure to
  # adjust the attributes here as well.
  let(:valid_course_attributes) { attributes_for(:course) }
  let(:valid_course_template_attributes) { attributes_for(:course_template) }
  let(:invalid_attributes) { { name: '' } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BaseCoursesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:canvas_client) { double(CanvasAPI) }

  describe 'when logged in' do
    before do
      allow(CanvasAPI).to receive(:client).and_return(canvas_client)
      sign_in user
    end

    describe "GET #index" do
      it "returns a success response" do
        get :index, params: {}, session: valid_session
        expect(response).to be_successful
      end
    end

    context "with type: 'Course'" do
      describe "GET #new" do
        it "returns a success response" do
          get :new, params: {type: 'Course'}, session: valid_session
          expect(response).to be_successful
        end
      end

      describe "GET #edit" do
        it "raises an error" do
          allow(canvas_client).to receive(:get_assignments).and_return([])
          expect { get :edit, params: {id: course.to_param, type: 'Course'}, session: valid_session }.to raise_error(BaseCourse::BaseCourseEditError)
        end
      end

      describe "POST #create" do
        subject(:post_create) do
          post(
            :create,
            params: {
              course: course_attributes,
              type: 'Course',
              session: valid_session
            }
          )
        end

        context "with valid params" do
          it "creates a new Course" do
            expect { post_create }.to change(Course, :count).by(1)
          end

          it "redirects to the base_course list" do
            post_create
            expect(response).to redirect_to(base_courses_path)
          end
        end

        context "with invalid params" do
          let(:course_attributes) { invalid_attributes }
          it "returns a success response (i.e. to display the 'new' template)" do
            post_create
            expect(response).to be_successful
          end
        end
      end

      describe "PUT #update" do
        subject(:put_update) do
          put(
            :update,
            params: {
              id: course.to_param,
              course: put_attributes,
              type: 'Course',
              session: valid_session
            }
          )
        end

        context "with valid params" do
          let(:put_attributes) {
            { name: 'turtles' }
          }
          before(:each) { put_update }

          it "updates the requested course" do
            course.reload
            expect(course.name).to eq('turtles')
          end

          it "redirects to the base_course" do
            expect(response).to redirect_to(base_courses_path)
          end
        end

        context "with invalid params" do
          let(:put_attributes) { invalid_attributes }
          before(:each) { put_update }

          it "returns a success response (i.e. to display the 'edit' template)" do
            expect(response).to redirect_to(edit_course_path(course))
          end
        end
      end

      describe "DELETE #destroy" do
        it "destroys the requested course" do
          course = create(:course, valid_course_attributes)
          expect {
            delete :destroy, params: {id: course.to_param, type: 'Course'}, session: valid_session
          }.to change(Course, :count).by(-1)
        end

        it "redirects to the base_courses list" do
          course = Course.create! valid_course_attributes
          delete :destroy, params: {id: course.to_param, type: 'Course'}, session: valid_session
          expect(response).to redirect_to(base_courses_url)
        end
      end
    end

    describe 'JSON requests' do
      let(:access_token) { create :access_token }

      describe "GET #index" do
        it "allows access token via params" do
          get :index, params: {access_key: access_token.key, type: 'Course'}, session: valid_session, format: :json
          expect(response).to be_successful
        end

        it "allows access token via headers" do
          request.headers.merge!('Access-Key' => access_token.key)

          get :index, params: {type: 'Course'}, session: valid_session, format: :json
          expect(response).to be_successful
        end
      end
    end

    context "with type: 'CourseTemplate'" do
      describe "GET #new" do
        it "returns a success response" do
          get :new, params: {type: 'CourseTemplate'}, session: valid_session
          expect(response).to be_successful
        end
      end

      describe "GET #edit" do
        it "returns a success response" do
          allow(canvas_client).to receive(:get_assignments).and_return([])
          get :edit, params: {id: course_template.to_param, type: 'CourseTemplate'}, session: valid_session
          expect(response).to be_successful
        end
      end

      describe "POST #create" do
        subject(:post_create) do
          post(
            :create,
            params: {
              course_template: course_template_attributes,
              type: 'CourseTemplate',
              session: valid_session
            }
          )
        end

        context "with valid params" do
          it "creates a new CourseTemplate" do
            expect { post_create }.to change(CourseTemplate, :count).by(1)
          end

          it "redirects to the base_course list" do
            post_create
            expect(response).to redirect_to(base_courses_path)
          end
        end

        context "with invalid params" do
          let(:course_template_attributes) { invalid_attributes }
          it "returns a success response (i.e. to display the 'new' template)" do
            post_create
            expect(response).to be_successful
          end
        end
      end

      describe "PUT #update" do
        subject(:put_update) do
          put(
            :update,
            params: {
              id: course_template.to_param,
              course_template: put_attributes,
              type: 'CourseTemplate',
              session: valid_session
            }
          )
        end

        context "with valid params" do
          let(:put_attributes) {
            { name: 'turtles' }
          }
          before(:each) { put_update }

          it "updates the requested course_template" do
            course_template.reload
            expect(course_template.name).to eq('turtles')
          end

          it "redirects to the base_course" do
            expect(response).to redirect_to(base_courses_path)
          end
        end

        context "with invalid params" do
          let(:put_attributes) { invalid_attributes }
          before(:each) { put_update }

          it "returns a success response (i.e. to display the 'edit' template)" do
            expect(response).to redirect_to(edit_course_template_path(course_template))
          end
        end
      end

      describe "DELETE #destroy" do
        it "destroys the requested course_template" do
          course_template = create(:course_template, valid_course_template_attributes)
          expect {
            delete :destroy, params: {id: course_template.to_param, type: 'CourseTemplate'}, session: valid_session
          }.to change(CourseTemplate, :count).by(-1)
        end

        it "redirects to the base_courses list" do
          course_template = CourseTemplate.create! valid_course_template_attributes
          delete :destroy, params: {id: course_template.to_param, type: 'CourseTemplate'}, session: valid_session
          expect(response).to redirect_to(base_courses_url)
        end
      end
    end

    describe 'JSON requests' do
      let(:access_token) { create :access_token }

      describe "GET #index" do
        it "allows access token via params" do
          get :index, params: {access_key: access_token.key, type: 'CourseTemplate'}, session: valid_session, format: :json
          expect(response).to be_successful
        end

        it "allows access token via headers" do
          request.headers.merge!('Access-Key' => access_token.key)

          get :index, params: {type: 'CourseTemplate'}, session: valid_session, format: :json
          expect(response).to be_successful
        end
      end
    end

    describe "GET #launch_new" do
      it "returns a success response" do
        get :launch_new, session: valid_session
        expect(response).to be_successful
      end
    end

    describe "POST #launch_create" do

      context "with valid params" do
        let(:sf_program_id) { 'TestSalesforceProgramID' }
        let(:email) { 'test@email.com' }
        let(:fellow_template_id) { '24' }
        let(:fellow_course_name) { 'Test Fellow Course Name' }
        let(:lc_template_id) { '25' }
        let(:lc_course_name) { 'Test LC Course Name' }

        subject(:post_launch_create) do
          post(
            :launch_create,
            params: {
              salesforce_program_id: sf_program_id,
              notification_email: email,
              fellow_course_template_id: fellow_template_id,
              fellow_course_name: fellow_course_name,
              lc_course_template_id: lc_template_id,
              lc_course_name: lc_course_name,
              session: valid_session
            }
          )
        end

        it "starts the launch job" do
          expect(LaunchProgramJob).to receive(:perform_later).with(sf_program_id, email, fellow_template_id, fellow_course_name, lc_template_id, lc_course_name).once
          post_launch_create
        end

        it "redirects to the course management page" do
          allow(LaunchProgramJob).to receive(:perform_later).and_return(nil)
          post_launch_create
          expect(response).to redirect_to(base_courses_path)
          expect(flash[:notice]).to match /Program launch started/
        end
      end

      context "with invalid params" do
        it "redirects to launch_new with error message, before calling launch job" do
          post(
            :launch_create,
            params: {
              salesforce_program_id: 'TestSalesforceProgramID',
              # missing params!
              session: valid_session
            }
          )
          expect(LaunchProgramJob).not_to receive(:perform_later)
          expect(response).to redirect_to(course_management_launch_path)
          expect(flash[:alert]).to match /Error:/
        end
      end

    end
  end
end
